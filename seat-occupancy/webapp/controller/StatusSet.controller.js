sap.ui.define(
  [
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/m/MessageBox",
  ],
  (Controller, Filter, FilterOperator, JSONModel, MessageToast, MessageBox) => {
    "use strict";

    return Controller.extend("sync6.cl1.seatoccupancy.controller.StatusSet", {
      onInit: function () {
        // init
        this._pageSize = 50;
        this._currentPage = 1;
        this._editMode = false;

        // ODataModel ÏÑ§Ï†ï (statusTableÏö©)
        const oODataModel = new sap.ui.model.odata.v2.ODataModel("/sap/opu/odata/sap/ZC103SDCDS_R_0001/");
        this.getView().setModel(oODataModel);

        // seatTableÏö© Îπà JSONModel Ï¥àÍ∏∞Ìôî
        const oSeatModel = new sap.ui.model.json.JSONModel({ seats: [] });
        this.getView().setModel(oSeatModel, "seatModel");

        const oView = this.getView();

        // üìÖ Ïù¥Î≤à Îã¨ 1Ïùº ~ ÎßêÏùº Í≥ÑÏÇ∞
        const oToday = new Date();
        const oFirstDate = new Date(oToday.getFullYear(), oToday.getMonth(), 1);
        const oLastDate = new Date(oToday.getFullYear(), oToday.getMonth() + 1, 0); // Îã§ÏùåÎã¨ 0Ïùº = Ïù¥Î≤àÎã¨ ÎßêÏùº

        // DateRangeSelection Ï¥àÍ∏∞Ìôî (UIÏóê ÎÇ†ÏßúÎèÑ ÌëúÏãúÎê®)
        const oDateRange = oView.byId("FlightDateRange");
        oDateRange.setDateValue(oToday);
        oDateRange.setSecondDateValue(oLastDate);

        // üìã ÌÖåÏù¥Î∏î ÏûêÎèô ÌïÑÌÑ∞ Ï†ÅÏö©
        const oBinding = oView.byId("statusTable").getBinding("items");
        const aInitialFilters = [new Filter("DepartDate", sap.ui.model.FilterOperator.BT, oToday, oLastDate)];

        if (oBinding) {
          oBinding.filter(aInitialFilters);
        } else {
          console.warn("Table binding is not yet available.");
        }

        // ÎìúÎ°≠Îã§Ïö¥Ïö© Íµ≠Í∞Ä ÏΩîÎìú Î¶¨Ïä§Ìä∏
        const oCountryModel = new JSONModel({
          SelectedFrom: "", // Í∏∞Î≥∏ ÏÑ†ÌÉùÍ∞í
          SelectedTo: "",
          CountryList: [
            { code: "", name: "Ï†ÑÏ≤¥" },
            { code: "00", name: "ÎåÄÌïúÎØºÍµ≠(Ïù∏Ï≤ú)" },
            { code: "01", name: "ÎåÄÌïúÎØºÍµ≠(Î∂ÄÏÇ∞/ÍπÄÌï¥)" },
            { code: "02", name: "Ïò§Ïä§Ìä∏Î†àÏùºÎ¶¨ÏïÑ(ÏãúÎìúÎãà)" },
            { code: "03", name: "Î≤†Ìä∏ÎÇ®(ÌïòÎÖ∏Ïù¥)" },
            { code: "04", name: "ÏïÑÎûçÏóêÎØ∏Î¶¨Ìä∏(ÎëêÎ∞îÏù¥)" },
            { code: "05", name: "ÎèÖÏùº(ÌîÑÎûëÌÅ¨Ìë∏Î•¥Ìä∏)" },
            { code: "06", name: "ÎØ∏Íµ≠(LA)" },
          ],
        });

        oView.setModel(oCountryModel, "countryModel");
      },

      onFlightSelect: function (oEvent) {
        const oSelectedItem = oEvent.getSource().getSelectedItem();
        const sScheduleId = oSelectedItem.getBindingContext().getProperty("ScheduleId");

        const oModel = this.getView().getModel(); // ODataModel
        const oSeatModel = this.getView().getModel("seatModel");

        oModel.read("/SeatSet", {
          filters: [new sap.ui.model.Filter("Scheduleid", "EQ", sScheduleId)],
          urlParameters: { $top: "1000" },
          success: (oData) => {
            const aSeats = oData.results;
            const iPageSize = 50; // ÏõêÌïòÎäî page size ÏÑ§Ï†ï

            oSeatModel.setProperty("/SeatSet", aSeats);
            oSeatModel.setProperty("/pageSize", iPageSize);
            oSeatModel.setProperty("/page", 1);
            // oSeatModel.setProperty("/SeatSet", oData.results);
            oSeatModel.setProperty("/title", `${sScheduleId} Ìï≠Í≥µÌé∏ Ï¢åÏÑù Î™©Î°ù`);

            this._updatePagedSeats();
            this._updateGroupedSeats();

            this.byId("addSeatButton").setEnabled(true); // "Ï¢åÏÑù Ï∂îÍ∞Ä" Î≤ÑÌäº ÌôúÏÑ±Ìôî
          },
          error: function () {
            MessageToast.show("Ï¢åÏÑù Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
          },
        });
      },

      _updatePagedSeats: function () {
        const oSeatModel = this.getView().getModel("seatModel");

        const aSeats = oSeatModel.getProperty("/SeatSet") || [];
        // const iPage = oSeatModel.getProperty("/page") || 1;
        const iPageSize = oSeatModel.getProperty("/pageSize") || 20;

        const iTotalPages = Math.ceil(aSeats.length / iPageSize) || 1;

        // ‚úÖ ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ïú†Ìö®ÏÑ± Í∞ïÏ†ú Î≥¥Ï†ï (Ïù¥ ÏïàÏóêÏÑú Ìï≠ÏÉÅ Î≥¥Ï†ï ‚Üí Ïñ¥ÎîîÏÑú Ìò∏Ï∂úÌïòÎì† ÏïàÏ†ïÏÑ± ÌôïÎ≥¥)
        if (this._currentPage > iTotalPages) {
          this._currentPage = iTotalPages;
        }
        if (this._currentPage < 1) {
          this._currentPage = 1;
        }

        const iPage = this._currentPage;

        const iStartIndex = (iPage - 1) * iPageSize;
        const iEndIndex = iStartIndex + iPageSize;

        const aPagedSeats = aSeats.slice(iStartIndex, iEndIndex);

        oSeatModel.setProperty("/pagedSeats", aPagedSeats);

        // ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        // const iTotalPages = Math.ceil(aSeats.length / iPageSize) || 1;
        oSeatModel.setProperty("/pageText", `${iPage} / ${iTotalPages}`);
      },

      onPrevPage: function () {
        const oSeatModel = this.getView().getModel("seatModel");
        let iPage = oSeatModel.getProperty("/page") || 1;

        if (iPage > 1) {
          iPage--;
          this._currentPage = iPage; // ÎèôÍ∏∞Ìôî
          oSeatModel.setProperty("/page", iPage);
          this._updatePagedSeats();
        }
      },

      onNextPage: function () {
        const oSeatModel = this.getView().getModel("seatModel");
        const aSeats = oSeatModel.getProperty("/SeatSet") || [];
        const iPageSize = oSeatModel.getProperty("/pageSize") || 20;
        const iTotalPages = Math.ceil(aSeats.length / iPageSize) || 1;

        let iPage = oSeatModel.getProperty("/page") || 1;

        if (iPage < iTotalPages) {
          iPage++;
          this._currentPage = iPage; // ÎèôÍ∏∞Ìôî
          oSeatModel.setProperty("/page", iPage);
          this._updatePagedSeats();
        }
      },

      onSearch: function () {
        // seatTableÏö© Îπà JSONModel Ï¥àÍ∏∞Ìôî
        const oSeatModel = new sap.ui.model.json.JSONModel({ seats: [] });
        this.getView().setModel(oSeatModel, "seatModel");

        const oView = this.getView();
        const aFilters = [];

        // ‚úÖ 1. ÎìúÎ°≠Îã§Ïö¥ÏóêÏÑú ÏÑ†ÌÉùÎêú Ï∂úÎ∞úÏßÄ / ÎèÑÏ∞©ÏßÄ
        const sFrom = oView.byId("countryFrom").getSelectedKey(); // Ïòà: "01"
        const sTo = oView.byId("countryTo").getSelectedKey();

        // ‚úÖ 2. ÎÇ†Ïßú Î≤îÏúÑ ÏÑ†ÌÉù
        const oDateRange = this.byId("FlightDateRange").getDateValue();
        const oDateRangeTo = this.byId("FlightDateRange").getSecondDateValue();

        // üåè Ï∂úÎ∞úÏßÄ ÌïÑÌÑ∞
        if (sFrom) {
          aFilters.push(new Filter("Countryfrom", FilterOperator.EQ, sFrom));
        }

        // üõ¨ ÎèÑÏ∞©ÏßÄ ÌïÑÌÑ∞
        if (sTo) {
          aFilters.push(new Filter("Countryto", FilterOperator.EQ, sTo));
        }

        // ‚è±Ô∏è Ï∂úÎ∞úÏùºÏûê ÌïÑÌÑ∞ (Í∏∞Í∞Ñ)
        if (oDateRange && oDateRangeTo) {
          aFilters.push(new Filter("DepartDate", FilterOperator.BT, oDateRange, oDateRangeTo));
        }

        // ‚úÖ Í≤∞Í≥º ÌÖåÏù¥Î∏îÏóê ÌïÑÌÑ∞ Ï†ÅÏö©
        const oTable = this.byId("statusTable");
        oTable.getBinding("items").filter(aFilters);
      },

      // formatStatusIconColor: function (sStatus) {
      //   switch (sStatus) {
      //     case "empty":
      //       return "Positive"; // ÌååÎûëÏÉâ
      //     case "low":
      //       return "Positive"; // Ï¥àÎ°ùÏÉâ
      //     case "normal":
      //       return "Critical"; // ÎÖ∏ÎûÄÏÉâ
      //     // case "high":
      //     //   return "Negative"; // Îπ®Í∞ÑÏÉâ
      //     default:
      //       return "Neutral";
      //   }
      // },

      formatStatusText: function (sStatus) {
        switch (sStatus) {
          case "empty":
            return "Îß§Ïö∞ Ïó¨Ïú†";
          case "low":
            return "Ïó¨Ïú†";
          case "normal":
            return "Î≥¥ÌÜµ";
          case "high":
            return "Îß§ÏßÑ ÏûÑÎ∞ï";
          case "soldout":
            return "Îß§ÏßÑ";
          default:
            return sStatus;
        }
      },

      formatStatusCircleClass: function (sStatus) {
        switch (sStatus) {
          case "empty":
            return "circleBlue";
          case "low":
            return "circleGreen";
          case "normal":
            return "circleYellow";
          case "high":
            return "circleRed";
          case "soldout":
            return "circleGrey";
          default:
            return "circleGrey";
        }
      },

      formatDateOnly: function (oDate) {
        if (!oDate) {
          return "";
        }

        // oDateÍ∞Ä string(YYYYMMDD) Ïù∏ Í≤ΩÏö∞ Ï≤òÎ¶¨ ‚Üí CDS ViewÏóêÏÑú stringÏúºÎ°ú ÎÑòÏñ¥Ïò§Îäî Í≤ΩÏö∞Í∞Ä ÎßéÏùå
        if (typeof oDate === "string" && oDate.length === 8) {
          return oDate.substring(0, 4) + "-" + oDate.substring(4, 6) + "-" + oDate.substring(6, 8);
        }

        // oDateÍ∞Ä JS Date object Ïù∏ Í≤ΩÏö∞
        if (oDate instanceof Date) {
          var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
            pattern: "yyyy-MM-dd",
          });
          return oDateFormat.format(oDate);
        }

        return oDate; // fallback
      },

      formatCountryName: function (sCode) {
        if (!sCode) {
          return "";
        }

        // sCodeÍ∞Ä "0", "1", ... Ï≤òÎüº Ïò§Î©¥ ‚Üí "00", "01" Î°ú Î≥ÄÌôò
        var sPaddedCode = sCode.toString().padStart(2, "0");

        // CountryList Î™®Îç∏ Ï∞∏Ï°∞
        var oCountryModel = this.getView().getModel("countryModel");
        var aCountryList = oCountryModel.getProperty("/CountryList");

        // ÏΩîÎìú ‚Üí Ïù¥Î¶Ñ Îß§Ìïë Ï∞æÍ∏∞
        var oMatch = aCountryList.find(function (oItem) {
          return oItem.code === sPaddedCode;
        });

        return oMatch ? oMatch.name : sCode; // Î™ª Ï∞æÏúºÎ©¥ ÏΩîÎìú Í∑∏ÎåÄÎ°ú ÌëúÏãú
      },

      onSaveSeat: function () {
        const oModel = this.getView().getModel();

        const sScheduleid = this._currentScheduleId;
        const sSeatcode = this.byId("seatCodeInput").getValue();
        const sAssigned = this.byId("assignedSelect").getSelectedKey();
        const sTicketID = this.byId("ticketIdInput").getValue();
        const sPassengerName = this.byId("passengerNameInput").getValue();
        const sMealtype = this.byId("mealtypeInput").getValue;

        const sPath = `/SeatSet(Scheduleid='${sScheduleid}',Seatcode=${parseInt(sSeatcode, 10)})`;

        oModel.update(
          sPath,
          {
            Assigned: sAssigned,
            TicketID: sTicketID,
          },
          {
            success: function () {
              sap.m.MessageToast.show("Ï¢åÏÑù Ï†ïÎ≥¥Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.");
              this.byId("seatEditDialog").close();
              this._refreshSeatTable();
            }.bind(this),
            error: function (oError) {
              sap.m.MessageToast.show("ÏàòÏ†ï Ïã§Ìå®: " + oError.message);
            },
          }
        );
      },

      _refreshSeatTable: function () {
        const oSelectedItem = this.getView().byId("statusTable").getSelectedItem();

        if (!oSelectedItem) {
          return;
        }

        const sScheduleId = oSelectedItem.getBindingContext().getProperty("ScheduleId");

        const oModel = this.getView().getModel();
        const oSeatModel = this.getView().getModel("seatModel");

        oModel.read("/SeatSet", {
          filters: [new sap.ui.model.Filter("Scheduleid", "EQ", sScheduleId)],
          urlParameters: {
            $top: 1000,
          },
          success: (oData) => {
            // this._currentPage = 1;
            // oSeatModel.setProperty("/SeatSet", oData.results);
            // oSeatModel.setProperty("/pagedSeats", oData.results.slice(0, this._pageSize));
            // this.byId("seatTable").getBinding("items").refresh();

            // Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ Ïàò Í≥ÑÏÇ∞
            const iTotalPages = Math.ceil(oData.results.length / this._pageSize) || 1;

            // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ïú†Ìö®ÏÑ± Ï≤¥ÌÅ¨
            if (this._currentPage > iTotalPages) {
              this._currentPage = iTotalPages;
            }

            // SeatSet Í∞±Ïã†
            oSeatModel.setProperty("/SeatSet", oData.results);

            // pagedSeats ÏûêÎèô Í∞±Ïã†
            this._updatePagedSeats();

            // Ï∂îÍ∞Ä: Ï¢åÏÑù Î∞∞ÏπòÎèÑ groupedSeats Í∞±Ïã†
            this._updateGroupedSeats();

            // ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ Í∞±Ïã†
            // oSeatModel.setProperty("/pageText", `${this._currentPage} / ${iTotalPages}`);
          },
          error: function () {
            sap.m.MessageToast.show("Ï¢åÏÑù Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
          },
        });
      },

      onCancel: function (dialog) {
        this.byId(dialog).close();
      },

      onOpenSeatCreateDialog: function () {
        // Ìï≠Í≥µÌé∏ ID ÏÑ∏ÌåÖ (Î≥ÄÍ≤Ω Î∂àÍ∞Ä)
        const oSelectedItem = this.byId("statusTable").getSelectedItem(); // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ìï≠Í≥µÌé∏
        const sScheduleId = oSelectedItem.getBindingContext().getProperty("ScheduleId");

        // ÌïÑÎìú ÏÑ∏ÌåÖ
        this.byId("createSchidInput").setValue(sScheduleId);
        this.byId("createSeatCodeInput").setValue("");
        this.byId("createAssignedSelect").setSelectedKey("N");

        this.byId("seatCreateDialog").open();
      },

      // Ï¢åÏÑù ÏÉùÏÑ±
      onCreateSeat: function () {
        const oModel = this.getView().getModel();

        const sSeatcode = this.byId("createSeatCodeInput").getValue();
        const sAssigned = this.byId("createAssignedSelect").getSelectedKey();
        const sScheduleid = this.byId("createSchidInput").getValue();

        if (sScheduleid == "") {
          sap.m.MessageToast.show("Ï¢åÏÑù ÏΩîÎìú ÏûÖÎ†•ÏùÄ ÌïÑÏàòÏûÖÎãàÎã§.");
        }
        oModel.create(
          "/SeatSet",
          {
            Scheduleid: sScheduleid,
            Seatcode: parseInt(sSeatcode, 10), // Seatcode INT ÌÉÄÏûÖÏûÑ
            Assigned: sAssigned,
          },
          {
            success: () => {
              sap.m.MessageToast.show("Ï¢åÏÑùÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.");
              this.byId("seatCreateDialog").close();
              this._refreshSeatTable();
            },
            error: (oError) => {
              sap.m.MessageToast.show("Ï¢åÏÑù ÏÉùÏÑ± Ïã§Ìå®: " + oError.message);
            },
          }
        );
      },

      onDeleteSeat: function () {
        const sScheduleid = this._currentScheduleId;
        const sSeatcode = this.byId("seatCodeInput").getValue();

        // Confirm Dialog ÎùÑÏö∞Í∏∞
        sap.m.MessageBox.confirm("Ï†ïÎßêÎ°ú Ï¢åÏÑùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?", {
          actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
          onClose: (sAction) => {
            if (sAction === sap.m.MessageBox.Action.YES) {
              const oModel = this.getView().getModel();

              const sPath = `/SeatSet(Scheduleid='${sScheduleid}',Seatcode=${parseInt(sSeatcode, 10)})`;

              oModel.remove(sPath, {
                success: () => {
                  sap.m.MessageToast.show("Ï¢åÏÑùÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
                  this.byId("seatEditDialog").close();
                  this._refreshSeatTable();
                },
                error: (oError) => {
                  sap.m.MessageToast.show("Ï¢åÏÑù ÏÇ≠Ï†ú Ïã§Ìå®: " + oError.message);
                },
              });
            }
          },
        });
      },

      // Ï¢åÏÑù ÏÑ†ÌÉù for Ï¢åÏÑù ÏàòÏ†ï
      onSeatPress: function (oEvent) {
        const oButton = oEvent.getSource();
        const oContext = oButton.getBindingContext("seatModel");
        const oData = oContext.getObject();
        let mealtypeText = this.switchMealtype(oData.Mealtype);

        // Dialog Ïó¥Í∏∞
        const oDialog = this.byId("seatEditDialog");

        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ DialogÏóê ÏÑ∏ÌåÖ
        this.byId("seatCodeInput").setValue(oData.Seatcode);
        this.byId("assignedSelect").setSelectedKey(oData.Assigned);
        this.byId("ticketIdInput").setValue(oData.TicketID);
        this.byId("passengerNameInput").setValue(oData.Passengername);
        this.byId("mealtypeInput").setValue(mealtypeText);

        // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Scheduleid ‚Üí Dialog Ï†ÄÏû• Ïãú ÌïÑÏöîÌïòÎØÄÎ°ú Ï†ÄÏû•
        this._currentScheduleId = oData.Scheduleid;

        // üîí Î™®Îëê ÏùΩÍ∏∞ Ï†ÑÏö©ÏúºÎ°ú ÏÑ§Ï†ï
        this.byId("assignedSelect").setEnabled(false);
        this.byId("ticketIdInput").setEditable(false);

        // ‚ú® Ï°∞Ìöå Î™®Îìú ÏÉÅÌÉú Ï†ÄÏû•
        this._editMode = false;

        // Î≤ÑÌäº ÏÉÅÌÉú Ï°∞Ï†ï
        this.byId("editButton").setVisible(true);
        this.byId("saveButton").setVisible(false);
        this.byId("deleteButton").setVisible(false);

        this.byId("seatEditDialog").open();

        oDialog.open();
      },

      // Ï¢åÏÑù ÏÑ†ÌÉù Ïãú ÌôîÎ©¥Ïóê ÌïÑÏöîÌïú Í∏∞ÎÇ¥Ïãù ÏΩîÌä∏ Î≥ÄÌôò
      switchMealtype: function (params) {
        let mealtypeText = "";
        switch (params) {
          case "A":
            mealtypeText = "Ïù¥ÏΩîÎÖ∏ÎØ∏-Îã≠Í≥†Í∏∞ ÎçÆÎ∞•";
            break;
          case "B":
            mealtypeText = "Ïù¥ÏΩîÎÖ∏ÎØ∏-ÌÅ¨Î¶º ÌååÏä§ÌÉÄ";
            break;
          case "C":
            mealtypeText = "ÌîÑÎ†àÏä§Ìã∞ÏßÄ-Ïä§ÌÖåÏù¥ÌÅ¨ Î∞Ä";
            break;
          case "D":
            mealtypeText = "ÌîÑÎ†àÏä§Ìã∞ÏßÄ-ÌïúÏãù Î∞òÏÉÅ";
            break;
          case "E":
            mealtypeText = "ÌîÑÎ†àÏä§Ìã∞ÏßÄ-Ïó∞Ïñ¥ ÌîåÎûòÌÑ∞";
            break;
          case "F":
            mealtypeText = "ÌîÑÎ†àÏä§Ìã∞ÏßÄ-Ï±ÑÏãù ÏÉêÎü¨Îìú Î∞Ä";
            break;
          default:
            mealtypeText = "ÏÑ†ÌÉùÏóÜÏùå";
            break;
        }
        return mealtypeText;
      },

      _updateGroupedSeats: function () {
        const oSeatModel = this.getView().getModel("seatModel");
        const aSeats = oSeatModel.getProperty("/SeatSet") || [];
        const iSeatsPerRow = 6;

        const aGroupedSeats = [];

        for (let i = 0; i < aSeats.length; i += iSeatsPerRow) {
          aGroupedSeats.push(aSeats.slice(i, i + iSeatsPerRow));
        }

        oSeatModel.setProperty("/groupedSeats", aGroupedSeats);
      },

      onEditSeat: function () {
        this.byId("assignedSelect").setEnabled(true);
        this.byId("ticketIdInput").setEditable(true);

        this._editMode = true;

        // Î≤ÑÌäº ÏÉÅÌÉú Ï†ÑÌôò
        this.byId("editButton").setVisible(false);
        this.byId("saveButton").setVisible(true);
        this.byId("deleteButton").setVisible(true);
      },
    });
  }
);
